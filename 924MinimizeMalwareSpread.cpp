#include <algorithm>
#include <cmath>
#include <cstdint>
#include <cstdlib>
#include <functional>
#include <iostream>
#include <iterator>
#include <limits>
#include <list>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <unordered_map>
#include <unordered_set>
#include <utility>
#include <vector>

using namespace std;

template<class Container>
void printContainer(const Container& container) {
//    return;

    if (container.size() == 0) {
        cout << "[]" << endl;
        return;
    }

    for (auto it = container.begin(); it != container.end(); it++) {
        if (it == container.begin()) {
            cout << "[";
        }
        cout << *it;
        if (it == prev(container.end())) {
            cout << "]" << endl;
        } else {
            cout << ", ";
        }
    }
}

template<class T>
void print2DimVec(const vector<vector<T>>& container) {
//    return;

    if (container.size() == 0) {
        cout << "[]" << endl;
        return;
    }

    for (auto it = container.begin(); it != container.end(); it++) {
        if (it == container.begin()) {
            cout << "[" << endl;
        }
        printContainer(*it);
        if (it == prev(container.end())) {
            cout << "]" << endl;
        }
    }
}

template<class T>
void printMap(const T& container) {
//    return;

    cout << "size " << container.size() << endl;
    if (container.size() == 0) {
        cout << "[]" << endl;
        return;
    }
    for (auto it = container.begin(); it != container.end(); it++) {
        if (it == container.begin()) {
            cout << "[ ";
        }

        cout << "[" << it->first << ", " << it->second << "]";

        if (next(it) == container.end()) {
            cout << " ]" << endl;
        } else {
            cout << ", ";
        }
    }
}

/**
 * Definition for singly-linked list.
 */
struct ListNode {
    int val;
    ListNode* next;
    ListNode() : val(0), next(nullptr) {}
    ListNode(int x) : val(x), next(nullptr) {}
    ListNode(int x, ListNode* next) : val(x), next(next) {}
};

void printList(const ListNode* node) {
    while (node != nullptr) {
        cout << node->val;

        node = node->next;
        
        if (node != nullptr) {
            cout << "->";
        } else {
            cout << endl;
        }
    }
}

/**
 * Definition for a binary tree node.
 */
struct TreeNode {
    int val;
    TreeNode* left;
    TreeNode* right;
    TreeNode() : val(0), left(nullptr), right(nullptr) {}
    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
    TreeNode(int x, TreeNode* left, TreeNode* right)
        : val(x), left(left), right(right) {}
};

void printTree(TreeNode* root) {
    if (root == nullptr) {
        return;
    }

    cout << root->val << endl;
    printTree(root->left);
    printTree(root->right);
}

// Definition for a Node.
class Node {
public:
    int val;
    Node* left;
    Node* right;
    Node* next;
    Node() : val(0), left(nullptr), right(nullptr), next(nullptr) {}
    Node(int _val) : val(_val), left(nullptr), right(nullptr), next(nullptr) {}
    Node(int _val, Node* _left, Node* _right, Node* _next)
        : val(_val), left(_left), right(_right), next(_next) {}
};

class Solution {
public:
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        int len = graph.size();
        vector<int> disjointSet(len, -1);
        // always merge the root with larger index into the root with smaller
        // index
        function<void(int, int)> unionFunc = [&](int n1, int n2) {
            disjointSet[n1] += disjointSet[n2];
            disjointSet[n2] = n1;
        };
        function<int(int)> findFunc = [&](int n) {
            while (disjointSet[n] >= 0) {
                n = disjointSet[n];
            }
            return n;
        };

        for (int i = 0; i < len; i++) {
            for (int j = i + 1; j < len; j++) {
                if (graph[i][j] == 1) {
                    int root1 = findFunc(i);
                    int root2 = findFunc(j);

                    if (root1 > root2) {
                        unionFunc(root2, root1);
                    } else if (root1 < root2) {
                        unionFunc(root1, root2);
                    } else {
                        // empty
                    }
                }
            }
        }

        sort(initial.begin(), initial.end());

        unordered_map<int, pair<int, int>>
            affectedDs;  // pair(count, minimumIndex)
        for (auto affectedNode : initial) {
            int root = findFunc(affectedNode);
            if (affectedDs.count(root)) {
                affectedDs[root].first++;
            } else {
                affectedDs.emplace(root, make_pair(1, affectedNode));
            }
        }

        // find a disjoint set that initially only has one node affected and has
        // the most nodes
        int num = 0;
        int ans = numeric_limits<int>::max();
        for (auto& it : affectedDs) {
            int root = it.first;
            int affectedNodeCount = it.second.first;
            int totalNodeCount = abs(disjointSet[root]);
            if (affectedNodeCount == 1 && totalNodeCount >= num) {
                ans = min(ans, it.second.second);
                num = totalNodeCount;
            }
        }

        return ans == numeric_limits<int>::max() ? initial[0] : ans;
    }
};
int main() {
    Solution s;
    /*
     */
    vector<vector<int>> input{
        {1, 0, 0, 0}, {0, 1, 0, 0}, {0, 0, 1, 1}, {0, 0, 1, 1}};
    vector<int> initial{3, 1};
    cout << s.minMalwareSpread(input, initial) << endl;
    /*
     */

    cout << "*************output*************" << endl;

    return 0;
}
